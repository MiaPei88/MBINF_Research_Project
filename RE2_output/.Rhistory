plot.margin = unit(c(1, -1, 1, 1), "cm"),
text = element_text(size = 14)
)
# Combine the phylo tree, bar chart and circle plot together
Phylo_GS_RP <- RP_bar %>% insert_left(circle_plot,width=0.1) %>% insert_left(Mia_ggtree_GS, width=1)
print(Phylo_GS_RP)
# Plot the bar chart of the two identified repeat types
RP_bar <- ggplot(Identified_RP_long, aes(x=Species, y=GenomicProportion, fill=RepeatType)) +
geom_bar(stat="identity", position="stack", width=0.7) + # Stacking bars
scale_fill_manual(values=c("cadetblue3", "bisque3")) + # Assign colors to each repeat type
labs(x=NULL,
y="Genomic Proportion",
fill="Repeat Type") +
theme_minimal() + # Using a minimal theme for clarity
coord_flip() +
theme(text = element_text(size = 15),
axis.text.x = element_text(angle=45, hjust=1, size = 15),# Rotate x labels for better visibility
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 20))
circle_plot <- ggplot(GS_df1, aes(x = Species, y = 1, size = Genome_Size_gbp)) +
geom_point(color = "orange", alpha = 0.6) +
scale_size_continuous(range = c(1, 10)) +  # Adjust circle size range as needed
coord_flip() +
labs(size = "Genome Size") +
theme_void() +  # Use theme_void() for a completely blank background
theme(
legend.position = "right",
plot.margin = unit(c(1, -1, 1, 1), "cm"),
text = element_text(size = 15)
)
# Combine the phylo tree, bar chart and circle plot together
Phylo_GS_RP <- RP_bar %>% insert_left(circle_plot,width=0.1) %>% insert_left(Mia_ggtree_GS, width=1)
print(Phylo_GS_RP)
pdf("../R_Plots/Phylo_GS_RP.pdf", width = 10, height = 8)
print(Phylo_GS_RP)
dev.off()
# Combine the phylo tree, bar chart and circle plot together
Phylo_GS_RP <- RP_bar %>% insert_left(circle_plot,width=0.2) %>% insert_left(Mia_ggtree_GS, width=1)
print(Phylo_GS_RP)
pdf("../R_Plots/Phylo_GS_RP.pdf", width = 10, height = 8)
print(Phylo_GS_RP)
dev.off()
Boxplot_Env_Var <- ggplot(data_long, aes(x = genus.sp, y = Value, fill = genus.sp)) +
geom_boxplot() +
scale_x_discrete(breaks = NULL) +
facet_wrap(~ Environmental_Variable, scales = "free") + # Separate plots for each environmental variable
scale_fill_manual(values = boxplot_palette, name = "Species") +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 15),
text = element_text(size = 15),
axis.text.y = element_text(size = 15))
print(Boxplot_Env_Var)
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
Boxplot_Env_Var <- ggplot(data_long, aes(x = genus.sp, y = Value, fill = genus.sp)) +
geom_boxplot() +
scale_x_discrete(breaks = NULL) +
facet_wrap(~ Environmental_Variable, scales = "free") + # Separate plots for each environmental variable
scale_fill_manual(values = boxplot_palette, name = "Species") +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 20),
text = element_text(size = 20),
axis.text.y = element_text(size = 15))
print(Boxplot_Env_Var)
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
Boxplot_Env_Var <- ggplot(data_long, aes(x = genus.sp, y = Value, fill = genus.sp)) +
geom_boxplot() +
scale_x_discrete(breaks = NULL) +
facet_wrap(~ Environmental_Variable, scales = "free") + # Separate plots for each environmental variable
scale_fill_manual(values = boxplot_palette, name = "Species") +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 20),
text = element_text(size = 15),
axis.text.y = element_text(size = 15))
print(Boxplot_Env_Var)
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
?xyplot
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.4)),      # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.4),      # Axis label sizes
par.strip.text = list(cex = 1.5)),
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.4),      # Axis label sizes
par.strip.text = list(cex = 1.6)),
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.strip.text = list(cex = 1.5),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.4)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.3)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ logGS | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Log (Genomic Proportion)",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.2)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
View(Cmbd_GS_RP_slct)
#### A lattice plot to visualize selected repeat types vs genome size
# Reshape the data from wide to long format
long_GS_RP <- Cmbd_GS_RP_slct[,-15]%>%
pivot_longer(
cols = -Genome_Size_gbp,  # Keep Species and Genome_Size as they are
names_to = "Repeat_Type",         # Column to store repeat type names
values_to = "Genomic_Proportion"         # Column to store the repeat values
)
long_GS_RP$Repeat_Type <- basename(long_GS_RP$Repeat_Type)
# View the reshaped data (optional)
head(long_GS_RP)
View(long_GS_RP)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ Genome_Size_gbp | Repeat_Type,  # Formula for lattice plot
data = long_logGS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Genomic Proportion",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.2)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ Genome_Size_gbp | Repeat_Type,  # Formula for lattice plot
data = long_GS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Genomic Proportion",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1.2)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
pdf("../R_Plots/Lattice_Plot_GS_RP.pdf", width = 12, height = 8)
print(Lattice_Plot_GS_RP)
dev.off()
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ Genome_Size_gbp | Repeat_Type,  # Formula for lattice plot
data = long_GS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Genomic Proportion",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
pdf("../R_Plots/Lattice_Plot_GS_RP.pdf", width = 12, height = 8)
print(Lattice_Plot_GS_RP)
dev.off()
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ Genome_Size_gbp | Repeat_Type,  # Formula for lattice plot
data = long_GS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Genomic Proportion",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8)),  # Y-axis title size
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
pdf("../R_Plots/Lattice_Plot_GS_RP.pdf", width = 12, height = 8)
print(Lattice_Plot_GS_RP)
dev.off()
# Create the lattice plot
Lattice_Plot_GS_RP <- xyplot(
Genomic_Proportion ~ Genome_Size_gbp | Repeat_Type,  # Formula for lattice plot
data = long_GS_RP,
layout = c(4, 4),  # Adjust layout based on the number of repeat types
scales = list(relation = "free"),  # Allow scales to be free for each panel
xlab = "Genome Size",
ylab = "Genomic Proportion",
par.strip.text = list(cex = 1.4),
par.settings = list(
par.xlab.text = list(cex = 1.8),  # X-axis title size
par.ylab.text = list(cex = 1.8),  # Y-axis title size
axis.text = list(cex = 1)),    # Axis label sizes
pch = 16, col = "darkgreen"  # Customize points
)
print(Lattice_Plot_GS_RP)
pdf("../R_Plots/Lattice_Plot_GS_RP.pdf", width = 10, height = 8)
print(Lattice_Plot_GS_RP)
dev.off()
print(Biplot_cos2_env_Allctry)
?fviz_pca_var
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 13))
print(Biplot_cos2_env_Allctry)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
Boxplot_Env_Var <- ggplot(data_long, aes(x = genus.sp, y = Value, fill = genus.sp)) +
geom_boxplot() +
scale_x_discrete(breaks = NULL) +
facet_wrap(~ Environmental_Variable, scales = "free") + # Separate plots for each environmental variable
scale_fill_manual(values = boxplot_palette, name = "Species") +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 20),
text = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 13))
print(Boxplot_Env_Var)
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
# Plot the bar chart of the two identified repeat types
RP_bar <- ggplot(Identified_RP_long, aes(x=Species, y=GenomicProportion, fill=RepeatType)) +
geom_bar(stat="identity", position="stack", width=0.7) + # Stacking bars
scale_fill_manual(values=c("cadetblue3", "bisque3")) + # Assign colors to each repeat type
labs(x=NULL,
y="Genomic Proportion",
fill="Repeat Type") +
theme_minimal() + # Using a minimal theme for clarity
coord_flip() +
theme(text = element_text(size = 15),
axis.text.x = element_text(angle=45, hjust=1, size = 15),# Rotate x labels for better visibility
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 20),
legend.text = element_text(size = 13))
circle_plot <- ggplot(GS_df1, aes(x = Species, y = 1, size = Genome_Size_gbp)) +
geom_point(color = "orange", alpha = 0.6) +
scale_size_continuous(range = c(1, 10)) +  # Adjust circle size range as needed
coord_flip() +
labs(size = "Genome Size") +
theme_void() +  # Use theme_void() for a completely blank background
theme(
legend.position = "right",
plot.margin = unit(c(1, -1, 1, 1), "cm"),
text = element_text(size = 15),
legend.text = element_text(size = 13)
)
# Combine the phylo tree, bar chart and circle plot together
Phylo_GS_RP <- RP_bar %>% insert_left(circle_plot,width=0.2) %>% insert_left(Mia_ggtree_GS, width=1)
print(Phylo_GS_RP)
pdf("../R_Plots/Phylo_GS_RP.pdf", width = 10, height = 8)
print(Phylo_GS_RP)
dev.off()
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
strip.text = element_text(size = 20),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_env_Allctry.pdf", Biplot_cos2_env_Allctry, width = 10, height = 8)
## Biplot combined with cos2
# All countries
Biplot_cos2_slct_env_Allctry <- fviz_pca_var(pca_allctry_slct, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_slct_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_slct_env_Allctry.pdf", Biplot_cos2_slct_env_Allctry, width = 10, height = 8)
## Biplot combined with cos2
# All countries
Biplot_cos2_slct_env_Allctry <- fviz_pca_var(pca_allctry_slct, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 5,        # Adjust label size
repel = TRUE) +         # Avoid label overlap for better visibility)
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_slct_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_slct_env_Allctry.pdf", Biplot_cos2_slct_env_Allctry, width = 10, height = 8)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 5,
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_slct_env_Allctry.pdf", Biplot_cos2_slct_env_Allctry, width = 10, height = 8)
## Biplot combined with cos2
# All countries
Biplot_cos2_slct_env_Allctry <- fviz_pca_var(pca_allctry_slct, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 5        # Adjust label size
) +         # Avoid label overlap for better visibility)
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_slct_env_Allctry)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 5) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 5,
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
## Biplot combined with cos2
Biplot_cos2_env_Allctry <- fviz_pca_var(pca_allctry, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 7,
repel = TRUE) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_env_Allctry.pdf", Biplot_cos2_env_Allctry, width = 10, height = 8)
## Biplot combined with cos2
# All countries
Biplot_cos2_slct_env_Allctry <- fviz_pca_var(pca_allctry_slct, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
labelsize = 7        # Adjust label size
) +         # Avoid label overlap for better visibility)
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
text = element_text(size = 15),
legend.text = element_text(size = 13)) +
ggtitle(NULL)
print(Biplot_cos2_slct_env_Allctry)
ggsave("../R_Plots/Biplot_cos2_slct_env_Allctry.pdf", Biplot_cos2_slct_env_Allctry, width = 10, height = 8)
Boxplot_Env_Var <- ggplot(data_long, aes(x = genus.sp, y = Value, fill = genus.sp)) +
geom_boxplot() +
scale_x_discrete(breaks = NULL) +
facet_wrap(~ Environmental_Variable, scales = "free") + # Separate plots for each environmental variable
scale_fill_manual(values = boxplot_palette, name = "Species") +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 20),
text = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 13))
print(Boxplot_Env_Var)
ggsave("../R_Plots/Boxplot_Env_Var.pdf", Boxplot_Env_Var, width = 12, height = 8)
# Plot the bar chart of the two identified repeat types
RP_bar <- ggplot(Identified_RP_long, aes(x=Species, y=GenomicProportion, fill=RepeatType)) +
geom_bar(stat="identity", position="stack", width=0.7) + # Stacking bars
scale_fill_manual(values=c("cadetblue3", "bisque3")) + # Assign colors to each repeat type
labs(x=NULL,
y="Genomic Proportion",
fill="Repeat Type") +
theme_minimal() + # Using a minimal theme for clarity
coord_flip() +
theme(text = element_text(size = 15),
axis.text.x = element_text(angle=45, hjust=1, size = 15),# Rotate x labels for better visibility
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 20),
legend.text = element_text(size = 13))
# Combine the phylo tree, bar chart and circle plot together
Phylo_GS_RP <- RP_bar %>% insert_left(circle_plot,width=0.2) %>% insert_left(Mia_ggtree_GS, width=1)
print(Phylo_GS_RP)
